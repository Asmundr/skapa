#Defince colors
. color.func
reset_color=${txtrst}
text_color=${bldblu}
hilight_color=${bldwht}
error_color=${bldred}

#Declare Functions

##########################
#   Global Functions     #
##########################
printlog ()
{
    echo -e $1 >> $LogFile
}

printscreen ()
{
    echo -e $1
}

nbmsg ()
{
    printlog "$1"
    printscreen "$1"
}


##########################
#  Initiation Functions  #
##########################
InitiateLog ()
{
    #Clean the logfile
    [ -e $LogFile.4 ] && mv $LogFile.4 $LogFile.5
    [ -e $LogFile.3 ] && mv $LogFile.3 $LogFile.4
    [ -e $LogFile.2 ] && mv $LogFile.2 $LogFile.3
    [ -e $LogFile.1 ] && mv $LogFile.1 $LogFile.2
    [ -e $LogFile.0 ] && mv $LogFile.0 $LogFile.1
    [ -e $LogFile ] && mv $LogFile $LogFile.0
    echo -e "${text_color}########################################
#           ${hilight_color}Skapa Log File${text_color}             #
########################################

Date/Time: ${hilight_color}${CurDate}${text_color}
Options:   ${hilight_color}${LaunchOpts}${text_color}

----------------------------------------
${reset_color}" > $LogFile
}

InitiateBuildEnv ()
{
    if [ -e $BuildPath/var/lib/pacman/ ]; then 
        #do nothing
        nbmsg "\t\t${hilight_color} + ${text_color}Found Build Environment...${reset_color}"
    else
        #Setup Required Folders
        nbmsg "\t\t${hilight_color} + ${text_color}Creating Build Environment...${reset_color}"
        mkdir -p $BuildPath/var/lib/pacman/
    fi
}

InitiateInstallEnv ()
{
    if [ -e $InstallLocation ]; then 
        #do nothing
        nbmsg "\t\t${hilight_color} + ${text_color}Found Install Environment...${reset_color}"
    else
        #Setup Required Folders
        nbmsg "\t\t${hilight_color} + ${text_color}Creating Install Environment...${reset_color}"
        mkdir -p $InstallLocation
    fi
}


##########################
#   Upgrade Functions    #
##########################
UpgradePackages ()
{
    nbmsg "${text_color}Upgrading all needed packages in ${hilight_color}${BuildDir}${text_color}...${reset_color}"
    $PacmanBin -r $BuildDir --config $ConfigFile --noconfirm -Syu
}


##########################
#     Build Functions    #
##########################
BuildProfile ()
{
    Profile=$1
    AvailModules=`ls -p $ProgPath/profiles/$Profile/|grep /$`
    [ -e $ProgPath/profiles/$Profile/default ] && . $ProgPath/profiles/$Profile/default \
        || echo '##Default Modules to load##
BuildPath="$ProgPath/build/$Profile"
InstallLocation="$ProgPath/install/$Profile"
defaultModules="base"
' > $ProgPath/profiles/$Profile/default
    Choices=$(for mod in $AvailModules; do echo "FALSE $mod";done)
    for mod in $defaultModules; do 
        Choices=`echo $Choices|sed "s/FALSE $mod/TRUE $mod/"`
    done
    nbmsg "\t${hilight_color} + ${text_color}Starting Build Process for ${hilight_color}${Profile}${text_color}...${reset_color}"
    Modules=$(zenity --list --checklist --column="-" --column="Modules" $Choices|sed 's/|/ /g')
    InitiateBuildEnv
    for module in $Modules; do
                #Load packages and copy cd-root
                nbmsg "\t\t${hilight_color} + ${text_color}Installing module ${hilight_color}${module}${text_color}...${reset_color}"
                ModulePath="$ProgPath/profiles/$Profile/$module"
                LoadPackages
                InstallPackages
                CopyCdRoot
    done
    InitiateInstallEnv
    BuildInitramfs
    BuildSquashfs
    ## Clear Variables
    BuildPath=""
    InstallLocation=""
    defaultModules=""
    Packages=""
}

UpgradeProfile ()
{
    Profile=$1
    nbmsg "\t${hilight_color} + ${text_color}Starting Upgrade Process for ${hilight_color}${Profile}${text_color}...${reset_color}"
    . $ProgPath/profiles/$Profile/default
    $PacmanBin -r $BuildPath --config $PacmanConfig -Syu >> $LogFile
    BuildInitramfs
    BuildSquashfs
    ## Clear Variables
    BuildPath=""
    InstallLocation=""
}


BuildInitramfs ()
{
    nbmsg "\t\t${hilight_color} + ${text_color}Building the Initramfs in ${hilight_color}${BuildPath}/boot/initramfs.gz${text_color}...${reset_color}"
    mount -o bind /proc $BuildPath/proc
    mount -o bind /dev $BuildPath/dev
    chroot $BuildPath/ '/sbin/mkinitcpio' -k /boot/vmlinuz-linux-aufs_friendly -g /boot/initramfs.gz >> $LogFile
    cp $BuildPath/boot/initramfs.gz $InstallLocation/
    cp $BuildPath/boot/vmlinuz-linux-aufs_friendly $InstallLocation/vmlinuz-linux
    umount $BuildPath/proc
    umount $BuildPath/dev
}

BuildSquashfs ()
{
    nbmsg "\t\t${hilight_color} + ${text_color}Building Squashfs with ${hilight_color}${BuildPath}${text_color} as /...${reset_color}"
    if [ -e $ProgPath/temp/buildtree ]; then
        rm -r $ProgPath/temp/buildtree
        mkdir -p $ProgPath/temp/buildtree
    else
        mkdir -p $ProgPath/temp/buildtree
    fi
    if [ -e $ProgPath/temp/uniontree ]; then
        rm -r $ProgPath/temp/uniontree
        mkdir -p $ProgPath/temp/uniontree
    else
        mkdir -p $ProgPath/temp/uniontree
    fi

    mount -t aufs -o dirs=$ProgPath/temp/buildtree/=rw:$BuildPath=ro none $ProgPath/temp/uniontree

    #Remove Kernel and Initramfs from /boot
    rm -r $ProgPath/temp/uniontree/boot/*

    #Remove Pacman Lib files
    ClearLibPacman
    nbmsg "\t\t\t${hilight_color} + ${text_color}Building the ${hilight_color}root.squashfs${text_color}...${reset_color}"
    mksquashfs $ProgPath/temp/uniontree $InstallLocation/root.squashfs -noappend >> $LogFile
    umount $ProgPath/temp/uniontree
}


#Build Profile
LoadPackages ()
{
    nbmsg "\t\t\t${hilight_color} + ${text_color}Grabbing Package List...${reset_color}"
    Packages=`cat $ModulePath/addedpacks|grep -v "#"|grep -xv ""`
}

InstallPackages ()
{
    nbmsg "\t\t\t${hilight_color} + ${text_color}Installing Packages to ${hilight_color}${BuildPath}${text_color}...${reset_color}"
    $PacmanBin -r $BuildPath --config $PacmanConfig -Sy >> $LogFile
    $PacmanBin -r $BuildPath --config $PacmanConfig --noconfirm -S --needed --quiet $Packages >> $LogFile
    if [ "$AddPacman" == "y" ]; then
        nbmsg "\t\t\t${hilight_color} + ${text_color}Installing Pacman to ${hilight_color}${BuildPath}${text_color}...${reset_color}"
        $PacmanBin -r $BuildPath --config $PacmanConfig --noconfirm -S pacman >> $LogFile
    fi
}

CopyCdRoot ()
{
    nbmsg "\t\t\t${hilight_color} + ${text_color}Copying ${hilight_color}${ModulePath}cd-root${text_color} over to ${hilight_color}${BuildPath}${text_color}...${reset_color}"
    cp -r ${ModulePath}cd-root/* $BuildPath/
}

ClearLibPacman ()
{
    nbmsg "\t\t\t${hilight_color} + ${text_color}Clearing ${hilight_color}/var/lib/pacman${text_color}...${reset_color}"
    rm -r $ProgPath/temp/uniontree/var/lib/pacman
}

DisplayGreet ()
{
    clear
    echo -e "${text_color}##########################
#      ${hilight_color}Skapa v1.0${text_color}        #
##########################

Date/Time: ${hilight_color}${CurDate}${text_color}
Options:   ${hilight_color}${LaunchOpts}${text_color}

"
}

DisplayHelp ()
{
        echo "Usage :"
        echo "     skapa [ build|upgrade ] [ profilename|ask|all ]"
        echo "     skapa [ add|del ] [ profilename|profilename/module ]"
        echo "     Default = skapa build ask"
}

